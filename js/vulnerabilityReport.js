class VulnerabilityReport {
    constructor(nodes, links) {
        this.nodes = nodes;
        this.links = links;
    }

    generateReport() {
        const vulnerabilities = [];
        
        // Check for password types and patterns
        const passwordMap = new Map();
        this.nodes.forEach(node => {
            // CASMM-based vulnerability checks
            if (node.passwordType === 'sharpass') {
                vulnerabilities.push({
                    type: 'Shared Password',
                    severity: 'Critical',
                    description: `Account "${node.name}" uses a shared password across multiple services`,
                    recommendation: 'Use unique passwords for each account, preferably generated by a password manager'
                });
            }
            if (node.passwordType === 'uniqpass') {
                vulnerabilities.push({
                    type: 'Simple Unique Password',
                    severity: 'High',
                    description: `Account "${node.name}" uses a unique but simple password`,
                    recommendation: 'Use a strong password or passphrase'
                });
            }
            if (node.passwordType === 'pattern') {
                vulnerabilities.push({
                    type: 'Predictable Password Pattern',
                    severity: 'Medium',
                    description: `Account "${node.name}" uses a predictable password pattern`,
                    recommendation: 'Use randomly generated passwords instead of patterns'
                });
            }
            if (node.type === 'root' && 
                !['passless', 'codeless2fa', 'app2fa'].includes(node.passwordType)) {
                vulnerabilities.push({
                    type: 'Insufficient Root Authentication',
                    severity: 'Critical',
                    description: `Root account "${node.name}" uses insufficient authentication (CASMM Level ${
                        node.passwordType.match(/\d+/) || '< 6'})`,
                    recommendation: 'Upgrade to at least CASMM Level 6 (App-based 2FA) for root accounts'
                });
            }
        });

        return vulnerabilities;
    }

    getConnectedNodes(nodeId) {
        return this.links
            .filter(link => link.source.id === nodeId || link.target.id === nodeId)
            .map(link => link.source.id === nodeId ? link.target : link.source);
    }
} 